services:
  postgres:
    image: postgres:15
    container_name: homelab-postgres
    environment:
      POSTGRES_DB: sklep_backup
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - homelab

  traefik:
    image: traefik:v3.0
    container_name: homelab-traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: homelab-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.lab`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  n8n:
    image: n8nio/n8n:latest
    container_name: homelab-n8n
    environment:
      - N8N_RUNNERS_ENABLED=true
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_SECURE_COOKIE=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_workflows
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.lab`)"
      - "traefik.http.routers.n8n.entrypoints=web"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  pihole:
    image: pihole/pihole:latest
    container_name: homelab-pihole
    environment:
      TZ: 'Europe/Warsaw'
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      SERVERIP: '192.168.1.13'
      DNS1: '1.1.1.1'
      DNS2: '8.8.8.8'
      FTLCONF_webserver_port: 8081  # Force web server to use port 808
    volumes:
      - pihole_etc:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
      - ./configs/pihole/pihole.toml:/etc/pihole/pihole.toml:ro  # Custom config
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN

  wireguard:
    image: linuxserver/wireguard
    container_name: homelab-wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Europe/Warsaw
      SERVERURL: auto
      SERVERPORT: 51820
      PEERS: 3
      PEERDNS: homelab-pihole
      INTERNAL_SUBNET: 10.13.13.0
    volumes:
      - wireguard_config:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
    networks:
      - homelab
    depends_on:
      - pihole

  prometheus:
    image: prom/prometheus:latest
    container_name: homelab-prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.lab`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: homelab-heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Warsaw
    volumes:
      - heimdall_data:/config
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`heimdall.lab`) || Host(`dashboard.lab`)"
      - "traefik.http.routers.heimdall.entrypoints=web"
      - "traefik.http.services.heimdall.loadbalancer.server.port=80"

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: homelab-uptime-kuma
    volumes:
      - uptime_data:/app/data
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.lab`)"
      - "traefik.http.routers.uptime.entrypoints=web"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"

  linkding:
    image: sissbruecker/linkding:latest
    container_name: homelab-linkding
    volumes:
      - linkding_data:/etc/linkding/data
    environment:
      - LD_SUPERUSER_NAME=admin
      - LD_SUPERUSER_PASSWORD=admin123
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.linkding.rule=Host(`bookmarks.lab`)"
      - "traefik.http.routers.linkding.entrypoints=web"
      - "traefik.http.services.linkding.loadbalancer.server.port=9090"

  it-tools:
    image: corentinth/it-tools:latest
    container_name: homelab-it-tools
    restart: unless-stopped
    networks:
      - homelab
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ittools.rule=Host(`tools.lab`)"
      - "traefik.http.routers.ittools.entrypoints=web"
      - "traefik.http.services.ittools.loadbalancer.server.port=80"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: homelab-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    restart: unless-stopped
    networks:
      - homelab

  # NEW MICROSERVICE
  microservice-order:
    build:
      context: ./microservice_mail
      dockerfile: ./services/order-service/Dockerfile
    container_name: homelab-microservice-order
    ports:
      - "5001:5001"
    env_file:
      - ./microservice_mail/.env
    volumes:
      - microservice_logs:/var/log/microservice_mail
      - microservice_cache:/app/cache
    networks:
      - homelab
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice-order.rule=Host(`orders.lab`)"
      - "traefik.http.routers.microservice-order.entrypoints=web"
      - "traefik.http.services.microservice-order.loadbalancer.server.port=5001"

  microservice-file:
    build:
      context: ./microservice_mail
      dockerfile: ./services/file-service/Dockerfile
    container_name: homelab-microservice-file
    ports:
      - "5002:5002"
    env_file:
      - ./microservice_mail/.env
    volumes:
      - ./microservice_mail/shared/drive-gmail_service.json:/app/drive-gmail_service.json:ro
      - microservice_logs:/var/log/microservice_mail
      - microservice_cache:/app/cache
    networks:
      - homelab
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice-file.rule=Host(`files.lab`)"
      - "traefik.http.routers.microservice-file.entrypoints=web"
      - "traefik.http.services.microservice-file.loadbalancer.server.port=5002"

  microservice-email:
    build:
      context: ./microservice_mail
      dockerfile: ./services/email-service/Dockerfile
    container_name: homelab-microservice-email
    ports:
      - "5003:5003"
    env_file:
      - ./microservice_mail/.env
    volumes:
      - microservice_logs:/var/log/microservice_mail
      - microservice_cache:/app/cache
    networks:
      - homelab
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice-email.rule=Host(`mail.lab`)"
      - "traefik.http.routers.microservice-email.entrypoints=web"
      - "traefik.http.services.microservice-email.loadbalancer.server.port=5003"

  microservice-orchestrator:
    build:
      context: ./microservice_mail
      dockerfile: ./orchestrator/Dockerfile
    container_name: homelab-microservice-orchestrator
    ports:
      - "5000:5000"
    env_file:
      - ./microservice_mail/.env
    depends_on:
      microservice-order:
        condition: service_healthy
      microservice-file:
        condition: service_healthy
      microservice-email:
        condition: service_healthy
    volumes:
      - microservice_logs:/var/log/microservice_mail
      - microservice_cache:/app/cache
    networks:
      - homelab
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.microservice-main.rule=Host(`microservice.lab`)"
      - "traefik.http.routers.microservice-main.entrypoints=web"
      - "traefik.http.services.microservice-main.loadbalancer.server.port=5000"

networks:
  homelab:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  n8n_data:
  grafana_data:
  prometheus_data:
  uptime_data:
  linkding_data:
  heimdall_data:
  pihole_etc:
  pihole_dnsmasq:
  wireguard_config:
  microservice_logs:
  microservice_cache:
